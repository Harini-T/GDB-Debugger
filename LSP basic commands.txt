sudo command
=============

sudo -- super user do

 If you prefix “sudo” with any command, it will run that command with elevated privileges or in other words allow a user with proper permissions to execute a command as another user, such as the superuser. 

This is the equivalent of “run as administrator” option in Windows

$dmesg -c

$sudo dmesg -c

$sudo -s




ls --- list
The ls command is used for viewing files, folders and directories.
==================

1. List Files when no arguments passed
$ ls

2. -l option: Provides information regarding permissions, file sizes and modified date and time
$ ls -l

3. -h option: human readabale format. If you want the file sizes in Kilo Bytes, Mega Bytes etc.
$ ls -lh

4. -a option: Viewing hidden files. Hidden files begin with a full stop (.)
$ ls -a

5. -t option: Sorts the file by modification time
$ ls -t

6. -r option: Perform reverse operation of sorting
$ ls -lrt





cd - Change directory
Allow the user to change between file directories
=================================================

Absolute Path : Path of the file or directory from the root directory (/)

Relative Path : Path related to the present working directory


1. cd /etc --> Will change from current directory to /etc
	Here we are giving absolute path.

2. cd gdb --> Will change to gdb folder present in /etc
	Here we are giving relative path

3. cd --> Will change to the home directory

4. cd .. --> Will move back to the parent directory

5. cd - --> Will switch to the old directory

6. cd ~ --> Will move to the home directory
$ cd ~/Linux_System_Prog



pwd command
========================
Will print the current working directory
$pwd

touch command 
====================
Allows user to make files from the command line Interface

Note: You can only create files using touch command not directories.

$ touch <filename>.<extension>

rm command
===================

rm -- remove 

This command is used to remove files

$ rm <filename>.<extension>

Note it only removes files, trying to remove directory fails

You can use -r option to remove the directories. -r option recursively removes directories

$ rm -r <directoryname>

mkdir command
====================

mkdir -- Make directory

Allows user to create a new directory.

$ mkdir <directory_name>

rmdir command
================

rmdir -- remove directory

Allows user to remove a directory

$ rmdir <directory_name>

mv command
================

mv -- Move

Allows user to move file from one place to another 

mv /home/user1/file1.txt /home/user/test/file1.txt

Other use case of mv is to rename

mv /home/user1/file1.txt /home/user/file.txt

cp command
===============

cp -- Copy

$ cp file1 file2

$ cp -i file1 file2

if file2 exists prompt for confirmation before overwritting it.

$ cp -p file1 file2

Copy file1 to file2 preserving the mode, ownership and timestamp.

clear command
==================

clear command clears the screen

clear command will take the user back to the start prompt of whatever directory you are currently operating in

man command
==============

man -- Manual

Use to show the manual of the command passed

$ man man







locate
==================

Locates a file within the Linux File System

$ locate <filename>


find
===================

Find command performs the same functionality as locates

$find <path> -name 'filename'

Differences between locate and find
====================================

locate uses a prebuilt database, which should be regularly updated
find iterates over the filesystem to find the files

locate is much faster as it uses a database(to update the database use updatedb command)
find can select files based on not only name but also permissions, owner, file type etc

$find / -name "*conf" -mtime 7
command returns a list of all files in the entire file system that end with the characters conf and have been modified in the last 7 days.





echo command
===============================

It prints the strings that are passed as arguments to the standard output.

echo is usually used in shell scripts to display a message or output the results of other commands.

1. Display a line of text on standard output.

	echo Hello, World!

2. Display a line of text containing a double quote.

	$ echo 'Hello "Linux"'

	$ echo "Hello \"Linux\""

3. Display a message containing special characters.

	Use the -e option to enable the interpretation of the escape characters.

	$ echo -e "You know nothing, Jamal.\n\t- Linux"

4. echo can be used with redirect operator to output to a file and not standard output.

	$ echo "Test Page" > testpage 

5. To append to a file

	$ echo "Test Page" >> testpage 

cat command
=========================

cat stands for concatenate

1. Display the contents of the file

	$ cat /etc/passwd

2. View contents of multiple files

	$ cat file1.txt file2.txt

3. Create a file with cat command

	cat > file.txt

	Will create a file 'file.txt' and allows user to type the content on the console, until user press CTRL-D to exit

4. Display Line numbers in file

	cat -n file.txt

5. Redirect output of a file to a new file
	
	cat file1.txt > file2.txt

	Careful, existing contents of file2.txt will be overwritten by contents of file1.txt file.

6. Appending to an existing file

	cat file1.txt >> file2.txt

	Contents of file1.txt will be appended to file2.txt





more command
======================

view contents of text file one page at a time.

press spacebar to go to the next page

$ more filename

more -num filename : shows 'num' of lines in a page

more -10 filename will show 10 lines for every page

less command
=======================

less was written by a man who was fed up with more's inability to scroll backwards through a file.

Less command is linux utility which can be used to read contents of text file one page(one screen) per time.

$ less filename.txt

You can navigate the page up/down using the less command and not possible in more command.

head command
============================

The head command outputs the first part (the head) of a file or files.

head, by default, prints the first 10 lines of each FILE to standard output. 

$ head myfile.txt

Display the first ten lines of myfile.txt.

head -15 myfile.txt

$ Display the first fifteen lines of myfile.txt.

$ head myfile.txt myfile2.txt

Display the first ten lines of both myfile.txt and myfile2.txt

$ head -c 20 myfile.txt

Will output only the first twenty bytes (characters) of myfile.txt

tail command
===============================

Tail is a command which prints the last few number of lines (10 lines by default) of a certain file, then terminates.

$ tail /path/to/file

Interested in just the last 3 lines of a file, or maybe interested in the last 15 lines of a file. this is when the -n option comes handy,

$ tail -n <number_of_lines> /path/to/file

most useful and commonly used option for tail command is -f option. f stands for follow

Unlike the default behaviour which is to end after printing certain number of lines, the -f option “which stands for follow” will keep the stream going.

$ tail -f /path/to/file





pipe |
=================

Linux systems allow stdout of a command to be connected to stdin of another command.

You can make it do so by using the pipe character ‘|’.

Pipe is used to combine two or more commands, and in this, the output of one command acts as input to another command

Syntax:

command_1 | command_2 | command_3 | .... | command_N 

1. Listing all files and directories and give it as input to more command.

$ ls -l | more 

2. Use head and tail to print lines in a particular range in a file.

$ cat sample2.txt | head -7 | tail -5

This command select first 7 lines and last 5 lines from the file and print those lines which are common to both of them.

tee command
==================

The tee command reads from the standard input and writes to both standard output and one or more files at the same time

$ df -h | tee disk_usage.txt

we are using the df command to get information about the amount of available disk space on the file system

The output is piped to the tee command, which displays the output to the terminal and writes the same information to the file disk_usage.txt.





ps command 
=====================

ps -- process status

Provides information about currently running processes, including their process identification numbers (PIDs)

When ps is used without any option, it provides information about two processes : shell and ps

panther2@ubuntu:/tmp$ ps
   PID TTY          TIME CMD
 39235 pts/11   00:00:01 bash
 47154 pts/11   00:00:00 ps

TIME is the amount of CPU (central processing unit) time in minutes and seconds that the process has been running

CMD is the name of the command that launched the process.

TTY is the name of the console or terminal. Useful on a multi user network

Common use of ps : ps aux | less

a -- list the processes of all users on the system rather than just those of the current user

u -- provide detailed information about each process. 

x -- adds to the list processes, such as daemons, which are programs that are launched during booting

An alternative set of options for viewing all the processes running on a system is

ps -ef | less

The -e option generates a list of information about every process currently running.

The -f option generates a listing that contains fewer items of information

The pstree command is similar to ps in that it can be used to show all of the processes on the system along with their PIDs

shows how processes are related to each other and in that it provides less detailed information about each process than does ps.







grep 
==============

1. grep “linux” file.txt 

It searches for the given string in the specified file.

2. Insensitive search  using -i option

$ grep -i “linux” file.txt

The grep command searches for the words like “LINUX”, “Linux”, “linux” case insensitively.

3. Searching for a string in multiple files

$ grep “linux” file*.*

This command will search for "linux" string in multiple files at a time. It searches in all files with file1.txt, file2.txt and along with different extensions too like file1.html, file2.php and so on.

4. Displaying the line numbers.

$ grep -n “word*” file.txt

You can use this grep command to display the line number which contains the matched string in a file using the -n option

5. Search the pattern recursively using -r option

$ grep -r linux /etc/

6. Counting the lines when words match

$ grep -c 'test' /home/example/test.txt



Other Frequently used commands
==================================

1. wc -- word count

wc -l : Prints the number of lines in a file.
wc -w : prints the number of words in a file.
wc -c : Displays the count of bytes in a file.
wc -m : prints the count of characters from a file.
wc -L : prints only the length of the longest line in a file.

wc filename.txt 
will show number of lines, words and bytes

2. top command

top command displays the top processes in the system ( by default sorted by cpu usage ). 

3. df command

Displays the file system disk space usage.

By default df -k displays output in bytes.

$ df -k

df -h displays output in human readable form. i.e size will be displayed in GB’s.

$ df -h

Use -T option to display what type of file system.

$ df -T

4. uname command

Uname command displays important information about the system such as — Kernel name, Host name, Kernel release number, Processor type, etc.,

$ uname -a

5. date command

Set the system date:

# date -s "01/31/2010 23:59:53"

6. ping command

Check network connectivity

ping ipaddress

7. which command

which command in Linux is a command which is used to locate the executable file associated with the given command by searching it in the path environment variable.

$ which ls

8. whoami command

whoami command print the name of current user

9. lsof command

lsof mean List of all open files.

lsof -u panther2

10. history command

11. time command

Find time taken by a command/program on Linux Shell

The time taken is shown in three forms.
real: Total end to end time taken by program/command
user: Time taken in user mode.
sys: Time taken in kernel mode

$ time ls -l



